{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","history","this","state","squares","length","slice","calculateWinner","xIsNext","setState","concat","console","log","renderSquare","React","Component","Game","Array","fill","stepNumber","step","status","current","winner","moves","map","move","desc","key","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.13f4a0b7.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n  return (\n    <button className=\"square\" \n      onClick={props.onClick}\n    >\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n    handleClick(i) {\n      const history = this.state.history;\n      const current = history[history.length - 1];\n      const squares = current.squares.slice();\n      if (calculateWinner(squares) || squares[i]) {\n        return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat ([{\n        squares: squares,\n      }]),\n      xIsNext: !this.state.xIsNext,\n    });\n    console.log(history);\n  }\n\n  renderSquare(i) {\n    return <Square value={this.props.squares[i]}\n    onClick={ () => this.props.onClick(i)}\n    />;\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n      }],\n      xIsNext: true,\n      stepNumber: 0,\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n    });\n  }\n\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n\n    const moves = history.map((step, move) =>{\n      const desc = move ?\n      'Go to move #' + move :\n      'Go to game start';\n      return (\n        <li key={move}>\n          <button onClick={() => this.jumpTo(move)}>{desc}\n          </button>\n        </li>\n      );\n    });\n\n    let status;\n    if (winner) {\n      status = 'WInner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board \n            squares={current.squares}\n            onClick={ (i) => this.handleClick(i) }\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}